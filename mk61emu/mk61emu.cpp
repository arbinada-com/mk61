#include "mk61emu.h"

static angle_unit_t CharToAngleUnit(const char c)
{
    switch (c)
    {
    case 10:
        return angle_unit_t::radian;
    case 11:
        return angle_unit_t::degree;
    default:
        return angle_unit_t::grade;
    }
}

std::istream& operator>>(std::istream& input, angle_unit_t& data)
{
    int value;
    input >> value;
    data = static_cast<angle_unit_t>(value);
    return input;
}

std::ostream& operator<<(std::ostream& output, const angle_unit_t data)
{
    int value = static_cast<int>(data);
    output << value;
    return output;
}


const mk61ROM_t ROM = 
{
.IK1302 =
    {
.microinstructions =
        {
            0x0000000, 0x0800001, 0x0A00820, 0x0040020, // 1
            0x0A03120, 0x0203081, 0x0A00181, 0x0803800,
            0x0818001, 0x0800400, 0x0A00089, 0x0A03C20,
            0x0800820, 0x0080020, 0x0800120, 0x1400020,
            0x0800081, 0x0210801, 0x0040000, 0x0058001,
            0x0808001, 0x0A03081, 0x0A01081, 0x0A01181,
            0x0040090, 0x0800401, 0x0A00081, 0x0040001,
            0x0800801, 0x1000000, 0x0800100, 0x1200801,
            0x0013C01, 0x0800008, 0x0A00088, 0x0010200,
            0x0800040, 0x0800280, 0x1801200, 0x1000208, // 10
            0x0080001, 0x0A00082, 0x0A01008, 0x1000001,
            0x0A00808, 0x0900001, 0x8010004, 0x0080820,
            0x0800002, 0x0140002, 0x0008000, 0x0A00090,
            0x0A00220, 0x0801001, 0x1203200, 0x4800001,
            0x0011801, 0x1008001, 0x0A04020, 0x4800801,
            0x0840801, 0x0840020, 0x0013081, 0x0010801,
            0x0818180, 0x0800180, 0x0A00081, 0x0800001  //17
        },
.instructions =
        {
            0x00204E4E, 0x00117360, 0x00114840, 0x01040240, // 1
            0x00164040, 0x001B3240, 0x00064640, 0x015B4013,
            0x00D93130, 0x00001040, 0x01A52014, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00C12040,
            0x00D0536D, 0x00517740, 0x00B43130, 0x00B22223,
            0x00C15340, 0x00FD2040, 0x002D1D1D, 0x0008403B,
            0x00092140, 0x00094061, 0x000A2140, 0x00082140,
            0x000D7076, 0x010D400D, 0x000A403B, 0x00056D40,
            0x00100259, 0x010B1340, 0x00242044, 0x010B7840,
            0x00064002, 0x01FF2008, 0x0008565A, 0x0126403F, // 10
            0x016C400D, 0x00C12077, 0x00517740, 0x00517740,
            0x00083240, 0x010C400D, 0x01FF200A, 0x010B3568,
            0x00117B5A, 0x0021206D, 0x01222034, 0x01015C5B,
            0x01D03454, 0x00005E5D, 0x010E400D, 0x010E0044,
            0x00F44E40, 0x009A206D, 0x00F44E5A, 0x00000000,
            0x00000000, 0x00000000, 0x00000000, 0x00C11D1D,
            0x00063333, 0x010B403B, 0x01344043, 0x00096A6A,
            0x000A4443, 0x00792120, 0x01D32047, 0x00081E1E,
            0x01AF1140, 0x00AB1D1D, 0x0039324C, 0x000B324C,
            0x0008326D, 0x000D404C, 0x00854D40, 0x00134040, // 20
            0x0009404C, 0x006D7770, 0x006D7240, 0x01001640,
            0x00A54C7E, 0x00F44E40, 0x01536900, 0x000A580E,
            0x003C5262, 0x0005716D, 0x013C4013, 0x00104070,
            0x00056F6D, 0x00A62070, 0x00106F40, 0x01056F40,
            0x001F3E3D, 0x0028595A, 0x001E2223, 0x00064B40,
            0x00524A40, 0x00692120, 0x001B4940, 0x00093240,
            0x011F0140, 0x00154840, 0x00062423, 0x00062423,
            0x01057340, 0x015E400D, 0x00095828, 0x00092223,
            0x00992F40, 0x00982F40, 0x00622040, 0x005D5820,
            0x00740F40, 0x00B81C20, 0x00D05373, 0x005B205C, // 30
            0x006D2062, 0x0133200A, 0x010B7D62, 0x00A52120,
            0x01054072, 0x01494013, 0x01040540, 0x00217362,
            0x013D6A40, 0x00067840, 0x01AB6C6D, 0x01332014,
            0x000E7C6C, 0x00050B3F, 0x00C15340, 0x00950853,
            0x00E0417A, 0x00E04240, 0x00532120, 0x00365562,
            0x008F1E20, 0x013D1740, 0x004C2120, 0x0170406A,
            0x00C05340, 0x00061D1D, 0x00814545, 0x00063333,
            0x00061E1E, 0x00091E1E, 0x00900720, 0x01514078,
            0x00081D1D, 0x01622206, 0x001E4545, 0x00114060,
            0x000B2E40, 0x000F2D40, 0x010E1F40, 0x000D7677, // 40
            0x00D33C40, 0x01D32032, 0x00116E60, 0x011D3440,
            0x00FF7440, 0x00073240, 0x001B430A, 0x01D32047,
            0x00113434, 0x001E6E40, 0x00D33C40, 0x00937540,
            0x00D01E20, 0x00043277, 0x00CA4020, 0x00107F54,
            0x00212068, 0x000B7840, 0x017C400C, 0x00056F6D,
            0x01470C40, 0x01716B62, 0x006B2120, 0x00332120,
            0x006D204C, 0x00E67362, 0x010D0940, 0x00062423,
            0x001A3A3A, 0x018F406F, 0x0151334C, 0x010D1716,
            0x01D35340, 0x00D24061, 0x00CA6554, 0x00104064,
            0x00512223, 0x00782120, 0x00263130, 0x001E3434, // 50
            0x00193838, 0x00183939, 0x000D6654, 0x010D7A40,
            0x010E1740, 0x00057340, 0x00B86140, 0x00045263,
            0x00122773, 0x008F5373, 0x002E5150, 0x0151404C,
            0x001E3737, 0x00894E40, 0x001E3636, 0x006D563D,
            0x00E07A41, 0x00E12973, 0x00082640, 0x00062540,
            0x00D87967, 0x0005565A, 0x0005286C, 0x00762041,
            0x00952040, 0x008F1D1D, 0x01D35340, 0x008F2040,
            0x00CC4F4F, 0x00114060, 0x00054040, 0x001E3434,
            0x01047340, 0x011E3434, 0x00C62C2B, 0x00C53130,
            0x003E1D1D, 0x01041740, 0x001E3535, 0x00D35353, // 60
            0x00DE4077, 0x00E24057, 0x00064E68, 0x01E53812,
            0x00D84067, 0x00064069, 0x000A402A, 0x00EF202A,
            0x01015C5B, 0x00090F40, 0x00005E5D, 0x010B3613,
            0x00144740, 0x01176806, 0x000A5A5A, 0x01D3200D  // 64
        },
.microprograms =
        {
            0x00, 0x00, 0x00, 0x10, 0x03, 0x1D, 0x00, 0x07, 0x1E, // 1
            0x10, 0x03, 0x1C, 0x0B, 0x07, 0x0C, 0x1E, 0x00, 0x00,
            0x15, 0x18, 0x09, 0x16, 0x18, 0x09, 0x16, 0x18, 0x24,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x03, 0x0E, 0x1E, 0x33, 0x00, 0x00, 0x00, 0x00,
            0x23, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x2C, 0x00, 0x01,
            0x11, 0x32, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0E, 0x1A,
            0x0F, 0x0E, 0x0D, 0x19, 0x03, 0x2F, 0x0E, 0x0D, 0x08,
            0x1C, 0x0C, 0x0D, 0x01, 0x00, 0x00, 0x03, 0x24, 0x0F,
            0x1C, 0x0C, 0x2F, 0x09, 0x1E, 0x34, 0x0E, 0x1E, 0x0C, // 10
            0x06, 0x0A, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0F,
            0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x26, 0x06,
            0x35, 0x34, 0x0D, 0x24, 0x1E, 0x1A, 0x09, 0x0C, 0x0F,
            0x3D, 0x00, 0x00, 0x1C, 0x03, 0x0E, 0x0A, 0x0F, 0x06,
            0x3D, 0x00, 0x0E, 0x3F, 0x03, 0x01, 0x00, 0x00, 0x0E,
            0x3F, 0x33, 0x0D, 0x01, 0x08, 0x00, 0x01, 0x08, 0x04,
            0x06, 0x03, 0x0E, 0x2B, 0x3A, 0x09, 0x12, 0x1E, 0x33,
            0x35, 0x03, 0x07, 0x0C, 0x1E, 0x1A, 0x00, 0x00, 0x00,
            0x35, 0x0C, 0x2F, 0x0E, 0x03, 0x01, 0x00, 0x00, 0x15,
            0x24, 0x1E, 0x1A, 0x23, 0x1D, 0x00, 0x00, 0x00, 0x00, // 20
            0x09, 0x0C, 0x2F, 0x09, 0x03, 0x00, 0x24, 0x0C, 0x0F,
            0x3D, 0x09, 0x1E, 0x3F, 0x03, 0x07, 0x0B, 0x22, 0x03,
            0x07, 0x0B, 0x0D, 0x0C, 0x03, 0x0E, 0x1E, 0x3A, 0x2B,
            0x3C, 0x03, 0x00, 0x09, 0x34, 0x0E, 0x1E, 0x0C, 0x1E,
            0x2E, 0x01, 0x31, 0x2E, 0x01, 0x31, 0x00, 0x00, 0x00,
            0x2E, 0x30, 0x03, 0x2E, 0x30, 0x03, 0x00, 0x00, 0x00,
            0x2E, 0x2D, 0x00, 0x2E, 0x2D, 0x00, 0x00, 0x00, 0x00,
            0x3B, 0x04, 0x2F, 0x37, 0x12, 0x00, 0x00, 0x00, 0x00,
            0x14, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x13, 0x00, 0x01, 0x13, 0x00, 0x01, 0x13, 0x04, // 30
            0x2E, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x2E, 0x00, 0x00,
            0x3D, 0x07, 0x10, 0x3F, 0x03, 0x00, 0x2C, 0x07, 0x1E,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x0F, 0x10, 0x03, 0x00, 0x1C, 0x03, 0x0F, 0x1D,
            0x03, 0x32, 0x00, 0x2B, 0x14, 0x00, 0x00, 0x08, 0x00,
            0x04, 0x14, 0x00, 0x00, 0x32, 0x00, 0x00, 0x32, 0x0C,
            0x0A, 0x32, 0x00, 0x00, 0x32, 0x00, 0x00, 0x32, 0x00,
            0x21, 0x15, 0x18, 0x21, 0x16, 0x18, 0x00, 0x17, 0x18,
            0x19, 0x1A, 0x18, 0x19, 0x16, 0x18, 0x09, 0x16, 0x18,
            0x2B, 0x15, 0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x00, // 40
            0x12, 0x1B, 0x0E, 0x0F, 0x1B, 0x0E, 0x23, 0x2B, 0x0A,
            0x2C, 0x18, 0x00, 0x2A, 0x18, 0x07, 0x0B, 0x03, 0x04,
            0x32, 0x14, 0x00, 0x32, 0x32, 0x11, 0x00, 0x08, 0x00,
            0x09, 0x0C, 0x15, 0x03, 0x00, 0x00, 0x06, 0x3C, 0x00,
            0x00, 0x2C, 0x00, 0x00, 0x2A, 0x00, 0x09, 0x16, 0x00,
            0x00, 0x00, 0x11, 0x00, 0x09, 0x16, 0x18, 0x09, 0x1E,
            0x00, 0x00, 0x07, 0x0A, 0x29, 0x3E, 0x33, 0x29, 0x00,
            0x0F, 0x0B, 0x0F, 0x10, 0x03, 0x08, 0x24, 0x03, 0x23,
            0x32, 0x01, 0x1D, 0x32, 0x08, 0x00, 0x32, 0x08, 0x32,
            0x32, 0x08, 0x23, 0x32, 0x08, 0x0F, 0x23, 0x23, 0x04, // 50
            0x09, 0x1E, 0x0F, 0x00, 0x00, 0x14, 0x00, 0x00, 0x08,
            0x37, 0x00, 0x00, 0x37, 0x00, 0x00, 0x37, 0x00, 0x00,
            0x01, 0x31, 0x00, 0x01, 0x31, 0x00, 0x01, 0x31, 0x36,
            0x1A, 0x30, 0x0D, 0x00, 0x30, 0x0D, 0x00, 0x30, 0x0D,
            0x30, 0x03, 0x00, 0x30, 0x03, 0x00, 0x30, 0x03, 0x2B,
            0x2D, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x2D, 0x00, 0x00,
            0x0A, 0x30, 0x03, 0x00, 0x30, 0x03, 0x00, 0x30, 0x03,
            0x00, 0x01, 0x31, 0x00, 0x01, 0x31, 0x00, 0x01, 0x31,
            0x00, 0x2D, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x2D, 0x00,
            0x2C, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x09, 0x18, 0x00, // 60
            0x07, 0x1E, 0x0F, 0x01, 0x00, 0x08, 0x1C, 0x0A, 0x08,
            0x14, 0x00, 0x00, 0x32, 0x00, 0x00, 0x32, 0x2B, 0x00,
            0x32, 0x00, 0x00, 0x32, 0x27, 0x36, 0x08, 0x09, 0x0C,
            0x1E, 0x02, 0x1D, 0x0F, 0x0C, 0x0F, 0x26, 0x07, 0x22,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x1D, 0x23, 0x23, 0x09, 0x23, 0x0C, 0x03, 0x23, 0x23,
            0x02, 0x35, 0x03, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x0C,
            0x01, 0x12, 0x00, 0x08, 0x00, 0x32, 0x0A, 0x00, 0x00,
            0x06, 0x18, 0x00, 0x17, 0x18, 0x00, 0x17, 0x18, 0x00,
            0x00, 0x01, 0x13, 0x00, 0x01, 0x13, 0x04, 0x01, 0x13, // 70
            0x00, 0x00, 0x00, 0x09, 0x15, 0x18, 0x00, 0x35, 0x03,
            0x0E, 0x03, 0x09, 0x0C, 0x1B, 0x1E, 0x0F, 0x1B, 0x08,
            0x00, 0x00, 0x1C, 0x03, 0x1E, 0x15, 0x02, 0x0C, 0x00,
            0x07, 0x1E, 0x10, 0x0F, 0x09, 0x32, 0x1E, 0x0F, 0x08,
            0x09, 0x1E, 0x1A, 0x18, 0x1D, 0x17, 0x03, 0x0F, 0x3D,
            0x07, 0x0B, 0x1A, 0x1D, 0x28, 0x00, 0x0E, 0x28, 0x08,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0x00, 0x09,
            0x00, 0x04, 0x2B, 0x23, 0x04, 0x08, 0x08, 0x00, 0x08,
            0x0E, 0x03, 0x00, 0x2B, 0x2F, 0x0D, 0x12, 0x03, 0x04,
            0x01, 0x08, 0x00, 0x01, 0x08, 0x00, 0x01, 0x08, 0x04, // 80
            0x0F, 0x1D, 0x2F, 0x0E, 0x03, 0x23, 0x07, 0x1E, 0x0D,
            0x0F, 0x12, 0x00, 0x23, 0x24, 0x1E, 0x23, 0x0F, 0x04,
            0x26, 0x12, 0x15, 0x03, 0x12, 0x04, 0x24, 0x2F, 0x0F,
            0x12, 0x04, 0x01, 0x0F, 0x07, 0x1E, 0x0F, 0x00, 0x01,
            0x0E, 0x0F, 0x20, 0x05, 0x00, 0x07, 0x12, 0x0E, 0x08,
            0x1E, 0x00, 0x10, 0x03, 0x0F, 0x04, 0x00, 0x00, 0x00,
            0x32, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x03, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x17, 0x0D,
            0x00, 0x00, 0x00, 0x0A, 0x1A, 0x18, 0x00, 0x17, 0x03,
            0x32, 0x09, 0x0F, 0x32, 0x07, 0x0C, 0x0C, 0x1A, 0x0F, // 90
            0x14, 0x00, 0x00, 0x32, 0x00, 0x00, 0x32, 0x00, 0x00,
            0x0E, 0x1E, 0x15, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02,
            0x00, 0x0E, 0x08, 0x0E, 0x1D, 0x23, 0x1E, 0x3A, 0x3A,
            0x1D, 0x04, 0x15, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x3A,
            0x00, 0x00, 0x3A, 0x00, 0x0D, 0x0E, 0x03, 0x0F, 0x00,
            0x3B, 0x3C, 0x2F, 0x37, 0x3C, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x02, 0x24, 0x1E,
            0x00, 0x00, 0x00, 0x00, 0x07, 0x0B, 0x22, 0x03, 0x04,
            0x00, 0x00, 0x39, 0x04, 0x25, 0x08, 0x03, 0x07, 0x0F,
            0x12, 0x2C, 0x00, 0x2B, 0x2A, 0x26, 0x0D, 0x07, 0x0F, // 100
            0x04, 0x0B, 0x08, 0x01, 0x10, 0x0D, 0x09, 0x00, 0x00,
            0x00, 0x01, 0x08, 0x04, 0x01, 0x08, 0x23, 0x01, 0x08,
            0x00, 0x00, 0x1B, 0x00, 0x00, 0x1B, 0x1F, 0x0E, 0x1B,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x1B, 0x00,
            0x00, 0x00, 0x01, 0x0F, 0x0D, 0x01, 0x09, 0x1E, 0x2B,
            0x00, 0x23, 0x1A, 0x07, 0x1E, 0x0C, 0x0F, 0x00, 0x00,
            0x1E, 0x12, 0x00, 0x00, 0x12, 0x00, 0x00, 0x12, 0x1A,
            0x1E, 0x00, 0x10, 0x0F, 0x24, 0x1E, 0x34, 0x1D, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x2F, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x09, 0x15, // 110
            0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x28,
            0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x09, 0x0C, 0x23,
            0x24, 0x0C, 0x1E, 0x0F, 0x00, 0x07, 0x03, 0x0F, 0x00,
            0x00, 0x00, 0x01, 0x0F, 0x07, 0x0B, 0x0F, 0x25, 0x0F,
            0x0F, 0x04, 0x00, 0x00, 0x00, 0x12, 0x09, 0x0C, 0x12,
            0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x09, 0x0C,
            0x03, 0x00, 0x00, 0x00, 0x04, 0x32, 0x24, 0x0F, 0x23,
            0x0E, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x09, 0x1E, 0x1A,
            0x07, 0x0B, 0x0F, 0x07, 0x0C, 0x1E, 0x1A, 0x0F, 0x00,
            0x0E, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, // 120
            0x12, 0x00, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x09,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0B,
            0x00, 0x00, 0x12, 0x00, 0x00, 0x12, 0x04, 0x0C, 0x12,
            0x32, 0x00, 0x00, 0x32, 0x00, 0x00, 0x08, 0x36, 0x00,
            0x02, 0x0D, 0x00, 0x01, 0x0F, 0x0D, 0x00, 0x0E, 0x1E,
            0x1E, 0x00, 0x10, 0x0F, 0x07, 0x0B, 0x34, 0x0F, 0x1D,
            0x1D, 0x04, 0x08, 0x36, 0x00, 0x08, 0x12, 0x00, 0x00,
            0x03, 0x1E, 0x0F, 0x26, 0x0A, 0x02, 0x26, 0x3E, 0x08 // 128
        }
    },
.IK1303 = 
    {
.microinstructions =
        {
            0x0000000, 0x0800001, 0x0040020, 0x1440090, // 1
            0x0A00081, 0x1000000, 0x1400020, 0x0800008,
            0x0A03180, 0x1002200, 0x0800400, 0x1418001,
            0x0080020, 0x0841020, 0x0203100, 0x0203088,
            0x0A00820, 0x0800120, 0x08001C0, 0x0810081,
            0x0A00089, 0x0800401, 0x0A010A0, 0x0A01081,
            0x0818001, 0x1A00220, 0x0201100, 0x0203420,
            0x0008000, 0x0801020, 0x0201420, 0x0801190,
            0x0040000, 0x0080820, 0x0800002, 0x0140002,
            0x0800100, 0x0A03C20, 0x0A00808, 0x0A01008, // 10
            0x0200540, 0x0601209, 0x0083100, 0x0A03081,
            0x8800004, 0x0058001, 0x1001280, 0x1008001,
            0x1200209, 0x4018001, 0x0040002, 0x1000001,
            0x0010200, 0x0800840, 0x0A01181, 0x4018801,
            0x0A10181, 0x0800801, 0x0040001, 0x0011190,
            0x0858001, 0x0040020, 0x3200209, 0x08000C0,
            0x4000020, 0x0600081, 0x1000000, 0x1000180  // 17
        },
.instructions =
        {
            0x00386050, 0x005B3F3E, 0x000F5970, 0x00152470, // 1
            0x000C3D50, 0x0011312F, 0x005B4544, 0x00165050,
            0x000C3404, 0x005B3F3E, 0x00D40450, 0x00162424,
            0x000C4962, 0x01FB5250, 0x000D4924, 0x01BB2222,
            0x00155050, 0x010F5247, 0x00182525, 0x00080505,
            0x000E041E, 0x00123433, 0x007F6425, 0x007F0D25,
            0x01650950, 0x01176553, 0x007E2432, 0x00087150,
            0x007E2455, 0x00135076, 0x00085977, 0x005B4544,
            0x000C2E26, 0x00310D2E, 0x00100E35, 0x00316B47,
            0x01381250, 0x0011302E, 0x01385F50, 0x00050250, // 10
            0x011C0101, 0x00195050, 0x00382C2C, 0x016F2222,
            0x013A2222, 0x002F6B56, 0x00093D6C, 0x00F04D50,
            0x000C1750, 0x00074A50, 0x01B45047, 0x003C2020,
            0x01AA2B6A, 0x00123432, 0x001D4933, 0x0113500C,
            0x00052556, 0x00087C50, 0x01130000, 0x00142B2B,
            0x004A1D50, 0x006E5756, 0x00496050, 0x00E57D58,
            0x011E5D22, 0x01F35F50, 0x00EA0505, 0x001C7A50,
            0x01080B50, 0x0054244B, 0x000C4050, 0x002A2121,
            0x00135C5C, 0x000A4650, 0x00152504, 0x009D2B60,
            0x00064350, 0x00192020, 0x00292C2C, 0x01235C50, // 20
            0x006D3C3C, 0x0031017D, 0x00092D2D, 0x004E2D2D,
            0x01596A7E, 0x00E3396E, 0x006E3654, 0x016E6E47,
            0x00534950, 0x00EE2062, 0x0016226E, 0x00660525,
            0x00135C5C, 0x000A4241, 0x00383B3B, 0x000C7277,
            0x00360404, 0x00042020, 0x00100A2E, 0x00155050,
            0x00532404, 0x0004642B, 0x01843C47, 0x01A35047,
            0x01847250, 0x015C112F, 0x00080434, 0x00152F23,
            0x00080505, 0x00906047, 0x0113150C, 0x006D2224,
            0x00747250, 0x000C632B, 0x00AD672B, 0x000A612E,
            0x01B97463, 0x00417374, 0x00BD0658, 0x00EA2450, // 30
            0x00087166, 0x01BD3950, 0x001A2E50, 0x00BD6047,
            0x00175079, 0x005E6035, 0x000A3847, 0x01067F47,
            0x008C5251, 0x0013612E, 0x0087602E, 0x005B3F3E,
            0x00DC2121, 0x00177374, 0x00182525, 0x00286050,
            0x00064F4E, 0x000C5251, 0x006E2926, 0x008F602F,
            0x008C502A, 0x00172928, 0x00814F4E, 0x003F534B,
            0x000F075B, 0x00082525, 0x01E85047, 0x00790505,
            0x00152F23, 0x0017506A, 0x00095047, 0x00082525,
            0x00E63A62, 0x00DA0B47, 0x01174150, 0x00182525,
            0x00090450, 0x01175B50, 0x00094850, 0x001B2F50, // 40
            0x00806047, 0x000A3720, 0x0010382F, 0x002C0505,
            0x009B5021, 0x00160505, 0x01ED3A50, 0x00040505,
            0x00082525, 0x01080F50, 0x01B35047, 0x000D3D4C,
            0x00180404, 0x01C03A50, 0x00E20421, 0x00287B50,
            0x00097F26, 0x0013612E, 0x01B6112F, 0x00322425,
            0x01B81847, 0x00BA714B, 0x00182450, 0x00080505,
            0x00182525, 0x004F1D24, 0x00736F5C, 0x00A67569,
            0x00AD2726, 0x01BE5022, 0x000A5E04, 0x00173A62,
            0x00CB752E, 0x00B11E25, 0x00CB0953, 0x00085068,
            0x002B2020, 0x01984150, 0x00C77C04, 0x00DA0950, // 50
            0x00160404, 0x00F56040, 0x00DE0450, 0x01CB1160,
            0x00CF4950, 0x000A4747, 0x001F210B, 0x00145050,
            0x01171050, 0x00052075, 0x001D3D37, 0x00365555,
            0x00130101, 0x01D57424, 0x00D66047, 0x01C47850,
            0x004D2C2C, 0x01174150, 0x00174847, 0x00C90350,
            0x000A2760, 0x0019502E, 0x00D72C2C, 0x01174850,
            0x006C224B, 0x000A495B, 0x00100E35, 0x00312104,
            0x01C00850, 0x00115A2F, 0x00EA0505, 0x00080574,
            0x00152F23, 0x005C6050, 0x01C94122, 0x01A42222,
            0x00DF2847, 0x00C9202E, 0x00A76047, 0x0117502F, // 60
            0x002E2020, 0x01205048, 0x00F8606D, 0x002D604C,
            0x00443A62, 0x000D3D2E, 0x015C3950, 0x01625022,
            0x006E136E, 0x0031602E, 0x01085D1A, 0x010F6F50,
            0x0017506A, 0x00FB5020, 0x000A3C47, 0x00174D50  // 64
        },
.microprograms =
        {
            0x2C, 0x23, 0x00, 0x2C, 0x23, 0x00, 0x2C, 0x23, 0x30, // 1
            0x31, 0x32, 0x00, 0x31, 0x32, 0x12, 0x31, 0x32, 0x30,
            0x00, 0x00, 0x00, 0x11, 0x23, 0x00, 0x1F, 0x06, 0x00,
            0x31, 0x00, 0x1C, 0x31, 0x00, 0x00, 0x31, 0x08, 0x1D,
            0x2C, 0x02, 0x0E, 0x2C, 0x02, 0x01, 0x2C, 0x02, 0x08,
            0x08, 0x3A, 0x00, 0x00, 0x3A, 0x01, 0x05, 0x3A, 0x11,
            0x18, 0x0A, 0x2B, 0x00, 0x01, 0x33, 0x02, 0x24, 0x25,
            0x37, 0x3A, 0x18, 0x31, 0x3A, 0x1F, 0x31, 0x3A, 0x3D,
            0x37, 0x02, 0x06, 0x31, 0x02, 0x12, 0x31, 0x10, 0x19,
            0x39, 0x02, 0x26, 0x33, 0x09, 0x08, 0x19, 0x19, 0x08, //10
            0x01, 0x14, 0x0C, 0x00, 0x00, 0x00, 0x1B, 0x06, 0x01,
            0x26, 0x00, 0x21, 0x12, 0x14, 0x24, 0x06, 0x12, 0x00,
            0x39, 0x00, 0x21, 0x08, 0x22, 0x00, 0x10, 0x14, 0x00,
            0x20, 0x00, 0x00, 0x39, 0x02, 0x00, 0x06, 0x25, 0x25,
            0x19, 0x02, 0x16, 0x09, 0x11, 0x19, 0x16, 0x11, 0x13,
            0x18, 0x08, 0x10, 0x18, 0x00, 0x01, 0x1F, 0x06, 0x12,
            0x1A, 0x12, 0x2E, 0x19, 0x02, 0x00, 0x33, 0x38, 0x00,
            0x0D, 0x06, 0x3B, 0x13, 0x0A, 0x02, 0x00, 0x27, 0x00,
            0x00, 0x00, 0x33, 0x13, 0x3C, 0x00, 0x11, 0x14, 0x04,
            0x11, 0x1D, 0x34, 0x13, 0x01, 0x00, 0x14, 0x27, 0x00, // 20
            0x2C, 0x10, 0x21, 0x2C, 0x02, 0x33, 0x00, 0x00, 0x00,
            0x37, 0x12, 0x2A, 0x31, 0x02, 0x00, 0x12, 0x06, 0x09,
            0x37, 0x12, 0x2A, 0x31, 0x14, 0x0C, 0x00, 0x00, 0x00,
            0x39, 0x0D, 0x12, 0x10, 0x0F, 0x00, 0x00, 0x27, 0x03,
            0x37, 0x12, 0x0C, 0x31, 0x05, 0x00, 0x31, 0x00, 0x00,
            0x37, 0x20, 0x0A, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x11, 0x13, 0x0E, 0x01, 0x0D, 0x11, 0x05, 0x25, 0x24,
            0x0A, 0x24, 0x0C, 0x08, 0x0D, 0x21, 0x00, 0x00, 0x00,
            0x37, 0x06, 0x3A, 0x31, 0x05, 0x02, 0x0A, 0x1D, 0x16,
            0x38, 0x14, 0x0C, 0x00, 0x08, 0x06, 0x20, 0x1B, 0x34, // 30
            0x0E, 0x02, 0x06, 0x00, 0x02, 0x1F, 0x19, 0x20, 0x08,
            0x37, 0x10, 0x21, 0x31, 0x12, 0x0C, 0x00, 0x00, 0x00,
            0x01, 0x2D, 0x30, 0x01, 0x2D, 0x00, 0x01, 0x2D, 0x30,
            0x33, 0x34, 0x06, 0x01, 0x18, 0x00, 0x01, 0x18, 0x08,
            0x31, 0x20, 0x34, 0x31, 0x20, 0x05, 0x31, 0x20, 0x08,
            0x1F, 0x3A, 0x20, 0x14, 0x3A, 0x20, 0x0C, 0x00, 0x20,
            0x0A, 0x20, 0x06, 0x30, 0x1F, 0x0C, 0x00, 0x20, 0x00,
            0x35, 0x20, 0x05, 0x34, 0x14, 0x09, 0x30, 0x20, 0x11,
            0x08, 0x18, 0x18, 0x08, 0x18, 0x18, 0x08, 0x33, 0x20,
            0x04, 0x16, 0x06, 0x36, 0x06, 0x0C, 0x01, 0x03, 0x00, // 40
            0x2F, 0x08, 0x18, 0x1C, 0x00, 0x18, 0x00, 0x20, 0x18,
            0x00, 0x18, 0x14, 0x35, 0x1D, 0x06, 0x14, 0x00, 0x3B,
            0x06, 0x20, 0x05, 0x34, 0x14, 0x09, 0x19, 0x00, 0x21,
            0x05, 0x3A, 0x3A, 0x06, 0x3A, 0x3A, 0x05, 0x3A, 0x3A,
            0x01, 0x23, 0x00, 0x01, 0x23, 0x00, 0x01, 0x23, 0x08,
            0x01, 0x32, 0x02, 0x01, 0x32, 0x02, 0x01, 0x32, 0x02,
            0x15, 0x04, 0x03, 0x15, 0x17, 0x03, 0x15, 0x17, 0x03,
            0x07, 0x2B, 0x03, 0x07, 0x17, 0x03, 0x07, 0x17, 0x03,
            0x04, 0x1E, 0x06, 0x1E, 0x3F, 0x0E, 0x09, 0x11, 0x13,
            0x0F, 0x29, 0x05, 0x09, 0x28, 0x09, 0x09, 0x09, 0x01, // 50
            0x08, 0x0B, 0x0B, 0x1B, 0x0B, 0x0B, 0x1E, 0x0B, 0x00,
            0x08, 0x0B, 0x0B, 0x0E, 0x0B, 0x0B, 0x1A, 0x0B, 0x00,
            0x11, 0x1D, 0x06, 0x08, 0x10, 0x04, 0x02, 0x06, 0x2F,
            0x1F, 0x1C, 0x2F, 0x00, 0x1C, 0x1C, 0x09, 0x18, 0x11,
            0x0B, 0x0C, 0x0C, 0x0B, 0x02, 0x30, 0x00, 0x00, 0x00,
            0x25, 0x1C, 0x04, 0x01, 0x1C, 0x1D, 0x1D, 0x06, 0x08,
            0x01, 0x30, 0x21, 0x3F, 0x2E, 0x11, 0x19, 0x25, 0x01,
            0x16, 0x00, 0x00, 0x03, 0x0C, 0x0A, 0x19, 0x0A, 0x19,
            0x0E, 0x16, 0x1B, 0x11, 0x1D, 0x10, 0x3C, 0x3A, 0x05,
            0x20, 0x08, 0x10, 0x06, 0x22, 0x19, 0x02, 0x22, 0x18, // 60
            0x06, 0x0C, 0x01, 0x10, 0x00, 0x00, 0x00, 0x11, 0x13,
            0x0A, 0x2B, 0x03, 0x0A, 0x17, 0x03, 0x0A, 0x17, 0x03,
            0x12, 0x14, 0x06, 0x12, 0x02, 0x00, 0x0A, 0x02, 0x00,
            0x0A, 0x24, 0x0C, 0x00, 0x0A, 0x21, 0x06, 0x20, 0x18,
            0x0A, 0x21, 0x21, 0x35, 0x02, 0x08, 0x10, 0x02, 0x05,
            0x00, 0x12, 0x0F, 0x11, 0x24, 0x21, 0x35, 0x02, 0x05,
            0x06, 0x25, 0x0C, 0x06, 0x02, 0x12, 0x14, 0x02, 0x18,
            0x12, 0x20, 0x14, 0x00, 0x00, 0x21, 0x18, 0x12, 0x0B,
            0x0A, 0x24, 0x06, 0x00, 0x20, 0x08, 0x25, 0x02, 0x00,
            0x24, 0x02, 0x35, 0x18, 0x12, 0x14, 0x34, 0x00, 0x18, // 70
            0x12, 0x14, 0x0C, 0x00, 0x0A, 0x21, 0x35, 0x02, 0x00,
            0x00, 0x26, 0x03, 0x06, 0x27, 0x03, 0x06, 0x27, 0x03,
            0x26, 0x03, 0x00, 0x27, 0x03, 0x00, 0x27, 0x03, 0x00,
            0x11, 0x04, 0x03, 0x00, 0x36, 0x03, 0x00, 0x36, 0x03,
            0x06, 0x04, 0x03, 0x07, 0x17, 0x03, 0x07, 0x17, 0x03,
            0x0A, 0x20, 0x24, 0x25, 0x03, 0x06, 0x08, 0x02, 0x0B,
            0x12, 0x04, 0x16, 0x0A, 0x17, 0x03, 0x0A, 0x17, 0x03,
            0x07, 0x2B, 0x00, 0x07, 0x17, 0x00, 0x07, 0x17, 0x25,
            0x00, 0x07, 0x2B, 0x03, 0x07, 0x17, 0x03, 0x07, 0x17,
            0x03, 0x36, 0x03, 0x11, 0x24, 0x1D, 0x24, 0x03, 0x06, // 80
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x15, 0x04, 0x03, 0x15, 0x17, 0x03, 0x15, 0x17,
            0x03, 0x12, 0x1D, 0x1D, 0x14, 0x06, 0x12, 0x06, 0x00,
            0x1C, 0x1C, 0x00, 0x1C, 0x2F, 0x00, 0x06, 0x20, 0x20,
            0x00, 0x0B, 0x02, 0x00, 0x0B, 0x02, 0x00, 0x36, 0x00,
            0x01, 0x18, 0x18, 0x01, 0x18, 0x18, 0x01, 0x18, 0x18,
            0x00, 0x00, 0x00, 0x33, 0x00, 0x08, 0x18, 0x04, 0x28,
            0x1F, 0x0C, 0x08, 0x25, 0x06, 0x0E, 0x06, 0x00, 0x18,
            0x06, 0x0E, 0x00, 0x16, 0x16, 0x00, 0x1D, 0x20, 0x20,
            0x18, 0x07, 0x06, 0x35, 0x10, 0x34, 0x05, 0x09, 0x24, // 90
            0x05, 0x09, 0x09, 0x09, 0x09, 0x01, 0x0D, 0x10, 0x09,
            0x08, 0x25, 0x33, 0x2E, 0x06, 0x1B, 0x06, 0x00, 0x13,
            0x1C, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x1C, 0x00, 0x38,
            0x1D, 0x3D, 0x05, 0x1D, 0x3D, 0x05, 0x1D, 0x3D, 0x05,
            0x1D, 0x20, 0x1D, 0x00, 0x18, 0x00, 0x33, 0x34, 0x06,
            0x39, 0x3C, 0x21, 0x01, 0x3C, 0x01, 0x06, 0x1F, 0x19,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
            0x0A, 0x17, 0x03, 0x11, 0x13, 0x14, 0x00, 0x05, 0x35,
            0x00, 0x05, 0x34, 0x00, 0x00, 0x34, 0x00, 0x00, 0x34,
            0x38, 0x04, 0x02, 0x33, 0x00, 0x11, 0x04, 0x00, 0x00, // 100
            0x0C, 0x00, 0x26, 0x33, 0x09, 0x09, 0x20, 0x08, 0x18,
            0x0F, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x05,
            0x30, 0x09, 0x20, 0x20, 0x06, 0x20, 0x21, 0x00, 0x00,
            0x0A, 0x3A, 0x10, 0x2B, 0x18, 0x38, 0x38, 0x0E, 0x02,
            0x16, 0x0C, 0x35, 0x05, 0x00, 0x00, 0x19, 0x30, 0x00,
            0x08, 0x1C, 0x18, 0x00, 0x1C, 0x00, 0x00, 0x05, 0x3A,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x20,
            0x1F, 0x0C, 0x08, 0x25, 0x06, 0x08, 0x00, 0x00, 0x34,
            0x06, 0x1C, 0x05, 0x25, 0x1C, 0x25, 0x1F, 0x18, 0x34,
            0x33, 0x20, 0x26, 0x0B, 0x02, 0x00, 0x34, 0x09, 0x09, // 110
            0x00, 0x06, 0x36, 0x00, 0x00, 0x11, 0x24, 0x0B, 0x34,
            0x20, 0x20, 0x00, 0x00, 0x39, 0x02, 0x08, 0x1D, 0x00,
            0x00, 0x08, 0x00, 0x3E, 0x00, 0x00, 0x37, 0x08, 0x1D,
            0x00, 0x00, 0x20, 0x00, 0x35, 0x20, 0x05, 0x34, 0x34,
            0x12, 0x14, 0x24, 0x34, 0x2E, 0x30, 0x1F, 0x06, 0x08,
            0x01, 0x05, 0x30, 0x04, 0x30, 0x2E, 0x06, 0x0E, 0x00,
            0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x34, 0x00,
            0x0A, 0x06, 0x1B, 0x1F, 0x00, 0x00, 0x25, 0x00, 0x3B,
            0x25, 0x10, 0x06, 0x00, 0x00, 0x0A, 0x10, 0x07, 0x03,
            0x0A, 0x10, 0x01, 0x00, 0x00, 0x00, 0x16, 0x19, 0x35, // 120
            0x06, 0x12, 0x10, 0x19, 0x10, 0x00, 0x00, 0x00, 0x3A,
            0x11, 0x06, 0x09, 0x35, 0x16, 0x10, 0x3E, 0x13, 0x0D,
            0x24, 0x3D, 0x10, 0x0E, 0x12, 0x33, 0x03, 0x06, 0x30,
            0x00, 0x26, 0x00, 0x00, 0x27, 0x00, 0x00, 0x3B, 0x08,
            0x06, 0x0C, 0x0C, 0x20, 0x0A, 0x06, 0x11, 0x14, 0x00,
            0x18, 0x24, 0x06, 0x0A, 0x10, 0x18, 0x11, 0x24, 0x18,
            0x10, 0x25, 0x05, 0x06, 0x3C, 0x05, 0x06, 0x00, 0x00,
            0x06, 0x0C, 0x0C, 0x00, 0x00, 0x12, 0x24, 0x1D, 0x1D  // 128
        }
    },
.IK1306 =
    {
.microinstructions =
        {
            0x0000000, 0x0800008, 0x0040020, 0x0800001, // 1
            0x0800021, 0x0080020, 0x0A00028, 0x0040100,
            0x4000100, 0x0010100, 0x0A00101, 0x0201089,
            0x0213201, 0x0800004, 0x0800800, 0x0800820,
            0x0200088, 0x4810002, 0x0A00820, 0x0800400,
            0x0801000, 0x0100000, 0x8800004, 0x0008000,
            0x1400020, 0x0800005, 0x4000020, 0x0A00180,
            0x0100000, 0x4000001, 0x8241004, 0x0400000,
            0x0080001, 0x0040001, 0x0212801, 0x0200808,
            0x0800000, 0x0010020, 0x0A00808, 0x0040090, // 10
            0x0A01008, 0x0800401, 0x0A00081, 0x0A01081,
            0x0803400, 0x0A01001, 0x0A11801, 0x0011001,
            0x0A10801, 0x0213801, 0x0098001, 0x0818001,
            0x0800420, 0x0880090, 0x0203C08, 0x0200809,
            0x0A00089, 0x0203090, 0x0840090, 0x0810002,
            0x0210801, 0x0210081, 0x0010000, 0x0200090,
            0x0210081, 0x0212801, 0x0A01020, 0x0A01020  // 17
        },
.instructions =
        {
            0x0070000, 0x0060040, 0x0076A2F, 0x00B4C00, // 1
            0x0090000, 0x00B4D00, 0x0090000, 0x0055300,
            0x0090000, 0x00B5400, 0x0090000, 0x0054600,
            0x0061000, 0x00B4800, 0x0065657, 0x0057300,
            0x0090000, 0x0075655, 0x0071700, 0x0060040,
            0x0070000, 0x0070000, 0x0074444, 0x00C4545,
            0x0280058, 0x0682825, 0x08A0000, 0x0280059,
            0x0800058, 0x0800059, 0x04D5F5F, 0x0FB2F22,
            0x0FB2F21, 0x0F80000, 0x0FB2F20, 0x0940000,
            0x0B80059, 0x0B80058, 0x0830000, 0x03D4343, // 10
            0x0075E5E, 0x0075B00, 0x0695900, 0x007002B,
            0x0070028, 0x0070003, 0x0070028, 0x0070052,
            0x0070015, 0x00C0037, 0x00F5C00, 0x0075C01,
            0x0075D5D, 0x007285F, 0x0DC585B, 0x00C005C,
            0x0680000, 0x0070A0A, 0x0075B59, 0x0070254,
            0x02A5F5F, 0x0075F5F, 0x00B0076, 0x0077700,
            0x00B0039, 0x0063A2A, 0x01B3B2A, 0x0682828,
            0x0680000, 0x0F05800, 0x00B003D, 0x04A0000,
            0x0053200, 0x0502800, 0x0054E00, 0x0560000,
            0x0530000, 0x00B0076, 0x0077700, 0x03E5F5F, // 20
            0x0DC0058, 0x0050032, 0x0682828, 0x005002A,
            0x0682C2C, 0x0682828, 0x0050039, 0x0682828,
            0x0682C2C, 0x0CA0025, 0x0070013, 0x0070066,
            0x0070014, 0x0070066, 0x0070014, 0x0F6005F,
            0x00B3E00, 0x0065300, 0x00B4E00, 0x0065300,
            0x0063B58, 0x0052A00, 0x0070058, 0x0184343,
            0x0FC7576, 0x00A2828, 0x0052A00, 0x0065300,
            0x00C0000, 0x0180000, 0x0682F2F, 0x0053C00,
            0x0065300, 0x00C0000, 0x0182F2F, 0x0680000,
            0x007042E, 0x0051600, 0x07A0000, 0x0070447, // 30
            0x00B164B, 0x0770000, 0x00C3119, 0x0180000,
            0x007005D, 0x0DC585F, 0x0830000, 0x0680000,
            0x0695E5E, 0x0830000, 0x0680000, 0x00A0009,
            0x00B0016, 0x00B0061, 0x0185A5A, 0x0075866,
            0x0F00900, 0x0840004, 0x0052F26, 0x068002F,
            0x0680027, 0x0056D00, 0x0180000, 0x0920000,
            0x0F00959, 0x0180000, 0x00A0000, 0x0B50015,
            0x0070011, 0x0070052, 0x0070066, 0x0070001,
            0x0070001, 0x0070066, 0x0070001, 0x0070066,
            0x0070001, 0x0070001, 0x0070066, 0x0070001, // 40
            0x0070066, 0x0070002, 0x0070066, 0x0070001,
            0x0075D5D, 0x0070052, 0x0075D5D, 0x0075D5D,
            0x0590003, 0x00A5A00, 0x00B2A00, 0x01C7400,
            0x00B3F00, 0x0185E00, 0x00B7458, 0x0B2005F,
            0x0F00947, 0x0AE0000, 0x00B5E63, 0x0090000,
            0x0186B2C, 0x00C006E, 0x0180000, 0x0180001,
            0x0072828, 0x00B3000, 0x0680000, 0x00C3636,
            0x0C10000, 0x0F07259, 0x0A90000, 0x0C45F00,
            0x0073131, 0x0A95A5A, 0x0C45A5A, 0x0680000,
            0x00A0000, 0x0690059, 0x0CA2C00, 0x0DC5931, // 50
            0x0DC596B, 0x08D0000, 0x00A5A5A, 0x007000E,
            0x0072E2E, 0x0074242, 0x0073334, 0x00B6265,
            0x0DB5E5E, 0x0070064, 0x007075F, 0x0075F51,
            0x00B1A03, 0x00F0051, 0x0D40068, 0x0075F5F,
            0x0070052, 0x0070065, 0x0CF0038, 0x0180067,
            0x00A4242, 0x005004E, 0x0070051, 0x0066000,
            0x0065300, 0x005004F, 0x0065300, 0x0064650,
            0x005004F, 0x0070050, 0x0070059, 0x0070052,
            0x01B353E, 0x005002A, 0x0070058, 0x007000E,
            0x0063B51, 0x005004E, 0x0075800, 0x0184343, // 60
            0x00A4242, 0x0066000, 0x0063B00, 0x0070000,
            0x0075000, 0x0605259, 0x0837125, 0x0680000,
            0x0070023, 0x0070024, 0x0072F29, 0x0070041,
            0x1060040, 0x0074900, 0x0075F5F, 0x0094A4A  // 64
        },
.microprograms =
        {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 1
            0x2C, 0x2A, 0x27, 0x13, 0x2B, 0x27, 0x13, 0x2B, 0x27,
            0x34, 0x2A, 0x27, 0x13, 0x2B, 0x27, 0x13, 0x2B, 0x27,
            0x29, 0x2A, 0x35, 0x29, 0x2B, 0x35, 0x29, 0x2B, 0x35,
            0x29, 0x12, 0x35, 0x29, 0x3F, 0x35, 0x29, 0x3F, 0x35,
            0x2E, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x2A, 0x02, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x12, 0x05, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x0E, 0x02, 0x00, 0x24, 0x02, 0x00, 0x24, 0x02, 0x00, // 10
            0x30, 0x1D, 0x05, 0x2F, 0x1D, 0x00, 0x00, 0x1D, 0x00,
            0x22, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x0C, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x25, 0x00,
            0x31, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x0F,
            0x0E, 0x34, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, // 20
            0x18, 0x25, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x1B, 0x03, 0x39, 0x00, 0x00, 0x00, 0x14, 0x18, 0x00,
            0x36, 0x00, 0x00, 0x03, 0x0B, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00,
            0x37, 0x1E, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x06, 0x07, 0x01, 0x06, 0x07, 0x01, 0x06, 0x07,
            0x34, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3C, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x3E, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, // 30
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x01, 0x25, 0x00, 0x01, 0x25, 0x00, 0x24, 0x02, 0x00,
            0x03, 0x04, 0x02, 0x03, 0x04, 0x02, 0x24, 0x02, 0x00,
            0x01, 0x06, 0x07, 0x01, 0x06, 0x07, 0x24, 0x02, 0x00,
            0x01, 0x04, 0x08, 0x01, 0x04, 0x08, 0x24, 0x00, 0x1A,
            0x03, 0x06, 0x09, 0x03, 0x06, 0x09, 0x24, 0x00, 0x02,
            0x03, 0x25, 0x00, 0x03, 0x25, 0x00, 0x24, 0x25, 0x00,
            0x03, 0x00, 0x38, 0x03, 0x00, 0x0B, 0x03, 0x25, 0x00,
            0x24, 0x25, 0x00, 0x24, 0x25, 0x0E, 0x05, 0x00, 0x00, // 40
            0x03, 0x25, 0x00, 0x03, 0x25, 0x00, 0x03, 0x25, 0x00,
            0x00, 0x00, 0x19, 0x05, 0x00, 0x19, 0x05, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x12,
            0x00, 0x21, 0x00, 0x00, 0x21, 0x24, 0x25, 0x03, 0x25,
            0x00, 0x0D, 0x02, 0x00, 0x0D, 0x02, 0x00, 0x0D, 0x02,
            0x00, 0x17, 0x00, 0x00, 0x17, 0x24, 0x05, 0x00, 0x00,
            0x24, 0x00, 0x05, 0x24, 0x00, 0x05, 0x24, 0x00, 0x05,
            0x24, 0x25, 0x00, 0x24, 0x25, 0x00, 0x24, 0x25, 0x00,
            0x13, 0x0A, 0x00, 0x00, 0x03, 0x0B, 0x00, 0x28, 0x00,
            0x00, 0x03, 0x05, 0x00, 0x03, 0x05, 0x00, 0x03, 0x05, // 50
            0x1B, 0x03, 0x00, 0x0B, 0x03, 0x0B, 0x00, 0x00, 0x00,
            0x2C, 0x02, 0x00, 0x24, 0x02, 0x00, 0x24, 0x02, 0x00,
            0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
            0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00,
            0x00, 0x16, 0x00, 0x00, 0x16, 0x00, 0x00, 0x16, 0x00,
            0x00, 0x17, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x21,
            0x00, 0x00, 0x17, 0x00, 0x00, 0x17, 0x24, 0x02, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x12, 0x00,
            0x14, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00,
            0x24, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, // 60
            0x13, 0x0A, 0x00, 0x00, 0x03, 0x0B, 0x00, 0x00, 0x00,
            0x1B, 0x18, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x13, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00,
            0x1B, 0x03, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x3B, 0x00, 0x00, 0x3B, 0x00, 0x12, 0x14, 0x00,
            0x0E, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x05, 0x24, 0x02,
            0x03, 0x00, 0x25, 0x03, 0x00, 0x25, 0x03, 0x00, 0x25,
            0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20,
            0x00, 0x11, 0x05, 0x00, 0x11, 0x05, 0x00, 0x11, 0x05,
            0x00, 0x11, 0x25, 0x00, 0x11, 0x25, 0x00, 0x11, 0x25, // 70
            0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
            0x03, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0E, 0x0F, 0x0F, 0x2A, 0x0F, 0x0F, 0x12, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1B, 0x1C, 0x00, 0x00, 0x00, 0x00,
            0x03, 0x15, 0x00, 0x03, 0x15, 0x00, 0x03, 0x15, 0x00,
            0x1B, 0x02, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x02, 0x00,
            0x00, 0x00, 0x00, 0x03, 0x00, 0x12, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x03, 0x12, 0x12, 0x12, 0x12, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x23, 0x02,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x23, 0x02, 0x00, // 80
            0x26, 0x27, 0x00, 0x28, 0x27, 0x00, 0x28, 0x27, 0x00,
            0x00, 0x26, 0x27, 0x00, 0x28, 0x27, 0x00, 0x28, 0x27,
            0x29, 0x2A, 0x27, 0x29, 0x2B, 0x27, 0x29, 0x2B, 0x3A,
            0x0E, 0x12, 0x12, 0x12, 0x00, 0x00, 0x10, 0x00, 0x00,
            0x0E, 0x12, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
            0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x00,
            0x00, 0x00, 0x00, 0x25, 0x00, 0x0E, 0x0F, 0x0F, 0x0F,
            0x0E, 0x0F, 0x0F, 0x00, 0x00, 0x0F, 0x0F, 0x0F, 0x0F,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x18, 0x00,
            0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 90
            0x00, 0x1D, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x1D, 0x00,
            0x1F, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x16, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x16, 0x05, 0x00, 0x16, 0x05, 0x00, 0x16, 0x05,
            0x00, 0x16, 0x02, 0x00, 0x16, 0x02, 0x00, 0x16, 0x02,
            0x03, 0x21, 0x02, 0x03, 0x21, 0x02, 0x03, 0x21, 0x02,
            0x18, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1B, 0x03, 0x0B, 0x00, 0x00, 0x00,
            0x03, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x1B, 0x03, 0x3D, 0x00, 0x00, 0x00, // 100
            0x24, 0x18, 0x03, 0x18, 0x05, 0x03, 0x18, 0x05, 0x00,
            0x03, 0x00, 0x32, 0x03, 0x00, 0x32, 0x03, 0x00, 0x32,
            0x24, 0x33, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x21, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
            0x00, 0x2C, 0x2A, 0x27, 0x13, 0x2B, 0x27, 0x00, 0x00,
            0x03, 0x25, 0x00, 0x03, 0x25, 0x00, 0x13, 0x09, 0x00,
            0x00, 0x3B, 0x05, 0x00, 0x3B, 0x05, 0x00, 0x3B, 0x05,
            0x00, 0x0D, 0x05, 0x00, 0x0D, 0x05, 0x00, 0x0D, 0x05,
            0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
            0x1B, 0x18, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 110
            0x00, 0x17, 0x00, 0x00, 0x17, 0x0E, 0x05, 0x0D, 0x02,
            0x18, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
            0x13, 0x09, 0x00, 0x00, 0x09, 0x00, 0x00, 0x09, 0x00,
            0x0E, 0x0F, 0x02, 0x24, 0x25, 0x00, 0x24, 0x25, 0x00,
            0x00, 0x00, 0x00, 0x29, 0x0F, 0x0F, 0x0F, 0x12, 0x00,
            0x00, 0x29, 0x12, 0x00, 0x29, 0x3F, 0x00, 0x13, 0x0F,
            0x00, 0x3D, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x3D, 0x00,
            0x1B, 0x03, 0x00, 0x0B, 0x03, 0x0B, 0x13, 0x39, 0x24,
            0x0E, 0x02, 0x00, 0x24, 0x02, 0x00, 0x13, 0x07, 0x00, // 120
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
            0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F  // 128
        }
    }
};

const mk61_register_position_t display_symbols[16] =
{
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', 'L', 'C', 'r', 'E', ' '
};

static uint8_t pages_addresses[15][2] =
{
    {1, 41},
    {1, 83},
    {1, 125},
    {1, 167},
    {1, 209},
    {1, 251},
    {2, 41},
    {2, 83},
    {2, 125},
    {2, 167},
    {2, 209},
    {2, 251},
    {3, 41},
    {4, 41},
    {5, 41}
};

static uint8_t pages_addresses_replacements_61[3][15] =
{
    { 10, 11, 6, 7, 2, 3, 4, 5, 0, 1, 14, 13, 12, 8, 9 },
    { 14, 13, 12, 10, 11, 6, 7, 8, 9, 4, 5, 0, 1, 2, 3 },
    { 1, 2, 3, 4, 5, 14, 13, 12, 6, 7, 8, 9, 10, 11, 0 }
};

static uint8_t stack_addresses[15][2] =
{
    {1, 34},
    {1, 76},
    {1, 118},
    {1, 160},
    {1, 202},
    {1, 244},
    {2, 34},
    {2, 76},
    {2, 118},
    {2, 160},
    {2, 202},
    {2, 244},
    {3, 34},
    {4, 34},
    {5, 34}
};

static uint8_t stack_addresses_replacements_61[3][5] =
{
    { 14, 13, 12, 8, 9 },
    { 5, 0, 1, 2, 3 },
    { 8, 9, 10, 11, 0 }
};

static uint8_t return_addresses[5] = {28, 22, 16, 10, 4};

const uint8_t program_counter_address = 34;

static uint8_t pages_addresses_replacements_54[3][14] =
{
//    0  1  2  3  4   5   6  7  8   9  10 11 12 13
    { 3, 4, 5, 0, 1, 13, 12, 8, 9, 10, 11, 6, 7, 2 },
    { 5, 0, 1, 2, 3, 13, 12, 10, 11, 6, 7, 8, 9, 4 },
    { 1, 2, 3, 4, 5, 13, 12, 6, 7, 8, 9, 10, 11, 0 }
};

static uint8_t stack_addresses_replacements_54[3][5] =
{
    { 10, 11, 6, 7, 2 },
    { 6, 7, 8, 9, 4 },
    { 8, 9, 10, 11, 0 }
};


/**
 * IK13
 */
IK13::IK13()
{
    memset(&(ROM), 0, sizeof(ROM));
    memset(M, 0, sizeof(M));
    memset(R, 0, sizeof(R));
    memset(ST, 0, sizeof(ST));
    S = 0;
    S1 = 0;
    L = 0;
    T = 0;
    P = 0;
    mtick = 0;
    microinstruction = 0;
    input = 0;
    output = 0;
    AMK = 0;
    ASP = 0;
    AK = 0;
    MOD = 0;
    key_x = 0;
    key_y = 0;
    comma = 0;
}

void IK13::set_ROM(const IK13_ROM *ROM)
{
    this->ROM = ROM;
}

static mtick_t J[] =
{
    0, 1, 2, 3, 4, 5,
    3, 4, 5, 3, 4, 5,
    3, 4, 5, 3, 4, 5,
    3, 4, 5, 3, 4, 5,
    6, 7, 8, 0, 1, 2,
    3, 4, 5, 6, 7, 8,
    0, 1, 2, 3, 4, 5
};

void IK13::tick()
{
    mtick_t signal_I = mtick >> 2;
    mtick_t signal_D = mtick / 12 | 0;
//    mtick_t signal_E = (mtick >> 2) % 3;
    if (mtick == 0)
    {
        AK = R[36] + 16 * R[39];
        if ((ROM->instructions[AK] & 0xfc0000) == 0)
            T = 0;
    }
    mtick_t  k = mtick / 36 | 0;
    if (k < 3)
        ASP = ROM->instructions[AK] & 0xff;
    else if (k == 3)
        ASP = ROM->instructions[AK] >> 8 & 0xff;
    else if (k == 4)
    {
        ASP = ROM->instructions[AK] >> 16 & 0xff;
        if (ASP > 0x1f)
        {
            if (mtick == 144)
            {
                R[37] = ASP & 0xf;
                R[40] = ASP >> 4;
            }
            ASP = 0x5f;
        }
    }
    MOD = ROM->instructions[AK] >> 24 & 0xff;
    AMK = ROM->microprograms[ASP * 9 + J[mtick >> 2]];
    AMK = AMK & 0x3f;
    if (AMK > 59)
    {
        AMK = (AMK - 60) * 2;
        if (L == 0)
            AMK++;
        AMK += 60;
    }
    microinstruction = ROM->microinstructions[AMK];
    io_t alpha = 0, beta = 0, gamma = 0;
    switch (microinstruction >> 24 & 3)
    {
    case 2:
    case 3:
        if ((mtick / 12 | 0) != key_x - 1)
            if (key_y > 0)
                S1 |= key_y;
        break;
    }
    if ((microinstruction & 1) > 0)
        alpha |= R[signal_I];
    if ((microinstruction & 2) > 0)
        alpha |= M[signal_I];
    if ((microinstruction & 4) > 0)
        alpha |= ST[signal_I];
    if ((microinstruction & 8) > 0)
        alpha |= ~R[signal_I] & 0xf;
    if ((microinstruction & 16) > 0)
        if (L == 0)
            alpha |= 0xa;
    if ((microinstruction & 32) > 0)
        alpha |= S;
    if ((microinstruction & 64) > 0)
        alpha |= 4;
    if ((microinstruction >> 7 & 16) > 0)
        beta |= 1;
    if ((microinstruction >> 7 & 8) > 0)
        beta |= 6;
    if ((microinstruction >> 7 & 4) > 0)
        beta |= S1;
    if ((microinstruction >> 7 & 2) > 0)
        beta |= ~S & 0xf;
    if ((microinstruction >> 7 & 1) > 0)
        beta |= S;
    if ((ROM->instructions[AK] & 0xfc0000) > 0)
    {
        if (key_y == 0)
            T = 0;
    }
    else
    {
        if ((mtick / 12 | 0) == key_x - 1)
            if (key_y > 0)
            {
                S1 = key_y;
                T = 1;
            }
        if (/*signal_D >= 0 &&*/ signal_D < 12)
            if (L > 0)
                comma = signal_D;
    }
    if ((microinstruction >> 12 & 4) > 0)
        gamma = ~T & 1;
    if ((microinstruction >> 12 & 2) > 0)
        gamma |= ~L & 1;
    if ((microinstruction >> 12 & 1) > 0)
        gamma |= L & 1;
    io_t sum = alpha + beta + gamma;
    io_t sigma = sum & 0xf;
    P = sum >> 4;
    if (MOD == 0 || (mtick >> 2) >= 36)
    {
        switch (microinstruction >> 15 & 7)
        {
        case 1:
            R[signal_I] = R[(signal_I + 3) % 42];
            break;
        case 2:
            R[signal_I] = sigma;
            break;
        case 3:
            R[signal_I] = S;
            break;
        case 4:
            R[signal_I] = R[signal_I] | S | sigma;
            break;
        case 5:
            R[signal_I] = S | sigma;
            break;
        case 6:
            R[signal_I] = R[signal_I] | S;
            break;
        case 7:
            R[signal_I] = R[signal_I] | sigma;
            break;
        }
        if ((microinstruction >> 18 & 1) > 0)
            R[(signal_I + 41) % 42] = sigma;
        if ((microinstruction >> 19 & 1) > 0)
            R[(signal_I + 40) % 42] = sigma;
    }
    if ((microinstruction >> 21 & 1) > 0)
        L = P & 1;
    if ((microinstruction >> 20 & 1) > 0)
        M[signal_I] = S;
    switch (microinstruction >> 22 & 3)
    {
    case 1:
        S = S1;
        break;
    case 2:
        S = sigma;
        break;
    case 3:
        S = S1 | sigma;
        break;
    }
    switch (microinstruction >> 24 & 3)
    {
    case 1:
        S1 = sigma;
        break;
    case 2:
        S1 = S1;
        break;
    case 3:
        S1 = S1 | sigma;
        break;
    }
    io_t x, y, z;
    switch (microinstruction >> 26 & 3)
    {
    case 1:
        ST[(signal_I + 2) % 42] = ST[(signal_I + 1) % 42];
        ST[(signal_I + 1) % 42] = ST[signal_I];
        ST[signal_I] = sigma;
        break;
    case 2:
        x = ST[signal_I];
        ST[signal_I] = ST[(signal_I + 1) % 42];
        ST[(signal_I + 1) % 42] = ST[(signal_I + 2) % 42];
        ST[(signal_I + 2) % 42] = x;
        break;
    case 3:
        x = ST[signal_I];
        y = ST[(signal_I + 1) % 42];
        z = ST[(signal_I + 2) % 42];
        ST[signal_I % 42] = sigma | y;
        ST[(signal_I + 1) % 42] = x | z;
        ST[(signal_I + 2) % 42] = y | x;
        break;
    }
    output = M[signal_I] & 0xf;
    M[signal_I] = input;
    mtick += 4;
    if (mtick > 167)
        mtick = 0;
}

void IK13::read_state(std::istream& data)
{
    for (uint16_t i = 0; i < sizeof(M); i++)
        data >> M[i];
    for (uint16_t i = 0; i < sizeof(R); i++)
        data >> R[i];
    for (uint16_t i = 0; i < sizeof(ST); i++)
        data >> ST[i];
    data >> S;
    data >> S1;
    data >> L;
    data >> T;
    data >> P;
    data >> mtick;
    data >> microinstruction;
    data >> key_x;
    data >> key_y;
    data >> comma;
    data >> input;
    data >> output;
    data >> AMK;
    data >> ASP;
    data >> AK;
    data >> MOD;
}

void IK13::qrite_state(std::ostream& data)
{
    for (uint16_t i = 0; i < sizeof(M); i++)
        data << M[i];
    for (uint16_t i = 0; i < sizeof(R); i++)
        data << R[i];
    for (uint16_t i = 0; i < sizeof(ST); i++)
        data << ST[i];
    data << S;
    data << S1;
    data << L;
    data << T;
    data << P;
    data << mtick;
    data << microinstruction;
    data << key_x;
    data << key_y;
    data << comma;
    data << input;
    data << output;
    data << AMK;
    data << ASP;
    data << AK;
    data << MOD;
}

/**
 * IR2
 */
IR2::IR2()
{
    input = 0;
    output = 0;
    mtick = 0;
    memset(M, 0, sizeof(M));
}

void IR2::tick()
{
    output = M[mtick];
    M[mtick] = input;
    mtick++;
    if (mtick == IR2_MTICK_COUNT)
        mtick = 0;
}

void IR2::read_state(std::istream& data)
{
    for (uint16_t i = 0; i < IR2_MTICK_COUNT; i++)
        data >> M[i];
    data >> input;
    data >> output;
    data >> mtick;
}

void IR2::write_state(std::ostream& data)
{
    for (uint16_t i = 0; i < IR2_MTICK_COUNT; i++)
        data << M[i];
    data << input;
    data << output;
    data << mtick;
}

/**
 * mk61emu
 */

mk61_emu::mk61_emu()
{
    this->m_mode = mk61emu_mode_t::mode_61;
    this->m_IR2_1 = NULL;
    this->m_IR2_2 = NULL;
    this->m_IK1302 = NULL;
    this->m_IK1303 = NULL;
    this->m_IK1306 = NULL;
    m_RSModeChanged = false;
    clear_registers();
    mk_engine::set_power_state(engine_power_state_t::engine_off);
}

mk61_emu::~mk61_emu()
{
    set_power_state(engine_power_state_t::engine_off);
}

void mk61_emu::clear_registers()
{
    int i = 0;
    for (i = 0; i < MK61EMU_REG_STACK_COUNT; i++)
        clear_register_str(m_reg_stack[i]);
    for (i = 0; i < MK61EMU_REG_MEM_COUNT; i++)
        clear_register_str(m_reg_mem[i]);
}

bool mk61_emu::is_running()
{
    if (get_power_state() == engine_power_state_t::engine_on)
    {
        if (m_IK1302->comma == 11)
            return true;
    }
    return false;
}

void mk61_emu::clear_register_str(mk61_register_t &reg)
{
    int len = sizeof(mk61_register_t);
    memset(reg, ' ', len - 1);
    reg[len - 1] = 0;
}

void mk61_emu::cleanup()
{
    if (m_IR2_1 != NULL)
    {
        delete m_IR2_1;
        m_IR2_1 = NULL;
    }
    if (m_IR2_2 != NULL)
    {
        delete m_IR2_2;
        m_IR2_2 = NULL;
    }
    if (m_IK1302 != NULL)
    {
        delete m_IK1302;
        m_IK1302 = NULL;
    }
    if (m_IK1303 != NULL)
    {
        delete m_IK1303;
        m_IK1303 = NULL;
    }
    if (m_IK1306 != NULL)
    {
        delete m_IK1306;
        m_IK1306 = NULL;
    }
    clear_registers();
}

mk_result_t mk61_emu::set_power_state(const engine_power_state_t value)
{
    if (value == get_power_state())
        return mk_result_t::mk_ok;
    mk_engine::set_power_state(value);
    switch(value)
    {
    case engine_power_state_t::engine_on:
        cleanup();
        m_angle_unit = angle_unit_t::radian;
        m_IR2_1 = new IR2();
        m_IR2_2 = new IR2();
        m_IK1302 = new IK13();
        m_IK1303 = new IK13();
        if (m_mode == mk61emu_mode_t::mode_61)
            m_IK1306 = new IK13();
        else
            m_IK1306 = NULL;
        // copy ROMs
        m_IK1302->set_ROM(&ROM.IK1302);
        m_IK1303->set_ROM(&ROM.IK1303);
        if (m_IK1306 != NULL)
            m_IK1306->set_ROM(&ROM.IK1306);
        do_step();
        break;
    case engine_power_state_t::engine_off:
        cleanup();
        break;
    }
    m_outputRequired = true;
    return mk_result_t::mk_ok;
}

mk_result_t mk61_emu::do_key_press(const int key1, const int key2)
{
    if (get_power_state() == engine_power_state_t::engine_on)
    {
        if (m_IK1302 != NULL)
        {
            m_IK1302->key_x = key1;
            m_IK1302->key_y = key2;
        }
        do_step();
        m_outputRequired = true;
    }
    return mk_result_t::mk_ok;
}

bool mk61_emu::is_output_required()
{
    if (m_RSModeChanged)
    {
        m_RSModeChanged = false;
        return m_outputRequired;
    }
    return m_outputRequired && !is_running();
}


void mk61_emu::tick()
{
    m_IK1302->input = m_IR2_2->output;
    m_IK1302->tick();
    m_IK1303->input = m_IK1302->output;
    m_IK1303->tick();
    if (m_mode == mk61emu_mode_t::mode_61)
    {
        m_IK1306->input = m_IK1303->output;
        m_IK1306->tick();
        m_IR2_1->input = m_IK1306->output;
    }
    else
        m_IR2_1->input = m_IK1303->output;
    m_IR2_1->tick();
    m_IR2_2->input = m_IR2_1->output;
    m_IR2_2->tick();
    m_IK1302->M[((m_IK1302->mtick >> 2) + 41) % 42] = m_IR2_2->output;
}

void mk61_emu::read_number(mk61_register_t &reg, uint8_t chip, unsigned char address)
{
    clear_register_str(reg);
    io_t *m;
    switch (chip)
    {
    case 1:
        m = m_IR2_1->M;
        break;
    case 2:
        m = m_IR2_2->M;
        break;
    case 3:
        m = m_IK1302->M;
        break;
    case 4:
        m = m_IK1303->M;
        break;
    default:
        m = m_IK1306->M;
        break;  /*case 5*/
    }
    // Exponent
    // 0123456789012
    // -1.2345678-99
    short exp_value = m[address - 3] * 10 + m[address - 6];
    if (m[address] == 9)
        exp_value = -(100 - exp_value);
    int i = 0;
    while (m[address - 33 + i * 3] == 0)
    {
        if (exp_value == 7 - i || i == 7)
            break;
        i++;
    }

    unsigned char digits[8];
    memset(digits, 0, 8);
    int digits_len = 0;
    int j = 8 - i;
    while (i < 8)
    {
        digits[--j] = m[address - 33 + i * 3];
        digits_len++;
        i++;
    }
    mk61_register_t coef_value;  // including exponent digits
    clear_register_str(coef_value);
    coef_value[0] = (m[address - 9] == 9) ? '-' : ' ';
    bool has_point = false;
    j = 0;
    for (i = 0; i < digits_len; i++)
    {
        coef_value[j++] = display_symbols[digits[i]];
        if ((i == 0 && (exp_value < 0 || exp_value > 7)) || (i == exp_value))
        {
            coef_value[j++] = ',';
            has_point = true;
        }
    }
    if (!has_point)
        coef_value[i] = ',';
    memcpy(reg, &coef_value, sizeof(mk61_register_t));
    if (exp_value < 0 || exp_value > 7)
    {
        if (exp_value < 0)
        {
            reg[10] = '-';
            exp_value = -exp_value;
        }
        reg[11] = display_symbols[exp_value / 10];
        reg[12] = display_symbols[exp_value % 10];
    }
}

void mk61_emu::read_all_fields(uint8_t replacement)
{
    uint8_t i = 0;
    for (i = 0; i < (m_mode == mk61emu_mode_t::mode_61 ? 15 : 14); i++)
        if (m_mode == mk61emu_mode_t::mode_61)
            read_number(m_reg_mem[i],
                       pages_addresses[pages_addresses_replacements_61[replacement][i]][0],
                       pages_addresses[pages_addresses_replacements_61[replacement][i]][1] - 8);
        else
            read_number(m_reg_mem[i],
                       pages_addresses[pages_addresses_replacements_54[replacement][i]][0],
                       pages_addresses[pages_addresses_replacements_54[replacement][i]][1] - 8);
    for (i = 0; i < 5; i++)
        if (m_mode == mk61emu_mode_t::mode_61)
            read_number(m_reg_stack[i],
                       stack_addresses[stack_addresses_replacements_61[replacement][i]][0],
                       stack_addresses[stack_addresses_replacements_61[replacement][i]][1]);
        else
            read_number(m_reg_stack[i],
                       stack_addresses[stack_addresses_replacements_54[replacement][i]][0],
                       stack_addresses[stack_addresses_replacements_54[replacement][i]][1]);
    m_prog_counter[0] = display_symbols[m_IK1302->R[program_counter_address]];
    m_prog_counter[1] = display_symbols[m_IK1302->R[program_counter_address - 3]];
    for (i = 0; i < 5; i++)
    {
        m_returns[i][0] = display_symbols[m_IK1302->R[return_addresses[i]]];
        m_returns[i][1] = display_symbols[m_IK1302->R[return_addresses[i] - 3]];
    }
}

mk_result_t mk61_emu::do_step()
{
    bool wasRunning = is_running();
    // Save registers state
    mk61_register_t reg_mem[MK61EMU_REG_MEM_COUNT];
    mk61_register_t reg_stack[MK61EMU_REG_STACK_COUNT];
    mk61_register_position_t prog_counter[2];
    int i, j = 0;
    if (!m_outputRequired)
    {
        for (i = 0; i < (m_mode == mk61emu_mode_t::mode_61 ? 15 : 14); i++)
            memcpy(reg_mem[0], m_reg_mem[0], sizeof(m_reg_mem));
        for (i = 0; i < 5; i++)
            memcpy(reg_stack[0], m_reg_stack[0], sizeof(m_reg_stack));
        for (i = 0; i < 2; i++)
            prog_counter[i] = m_prog_counter[i];
    }

    this->m_IK1303->key_y = 1;
    this->m_IK1303->key_x = static_cast<int8_t>(m_angle_unit);
//    FILE *f = fopen("trace_c.txt", "w");
    for (int count = 1; count <= 560; count++)
    {
        for (i = 0; i < 42; i++)
        {
            tick();
//            if (count > 0 && count < 10)
//                fprintf(f, "%3d  %2d: %10d  %10d  %10d  %10d  %10d | %3d  %3d  %3d  %3d  %3d\n",
//                        count, i,
//                        this->IR2_1->output,
//                        this->IR2_2->output,
//                        this->IK1302->output,
//                        this->IK1303->output,
//                        this->IK1306->output,
//                        this->IR2_1->mtick,
//                        this->IR2_2->mtick,
//                        this->IK1302->mtick,
//                        this->IK1303->mtick,
//                        this->IK1306->mtick);
        }
    }
//	fclose(f);
    this->m_IK1302->key_x = 0;
    this->m_IK1302->key_y = 0;

    if (this->m_IR2_1->mtick == 84)
        read_all_fields(0);

    if (!m_outputRequired)
    {
        for (i = 0; i < (m_mode == mk61emu_mode_t::mode_61 ? 15 : 14); i++)
        {
            for (j = 0; j < mk61_register_positions_count; j++)
            {
                if (reg_mem[i][j] != m_reg_mem[i][j])
                {
                    m_outputRequired = true;
                    break;
                }
            }
            if (m_outputRequired)
                break;
        }
    }
    if (!m_outputRequired)
    {
        for (i = 0; i < 5; i++)
        {
            for (j = 0; j < mk61_register_positions_count; j++)
            {
                if (reg_stack[i][j] != m_reg_stack[i][j])
                {
                    m_outputRequired = true;
                    break;
                }
            }
            if (m_outputRequired)
                break;
        }
    }
    if (!m_outputRequired)
    {
        for (i = 0; i < 2; i++)
            if (prog_counter[i] != m_prog_counter[i])
            {
                m_outputRequired = true;
                break;
            }
    }

    m_RSModeChanged = wasRunning != is_running();

    return mk_result_t::mk_ok;
}

mk_result_t mk61_emu::do_input(const char* buf, size_t length)
{
    return mk_result_t::mk_ok;
}


const char* mk61_emu::get_reg_stack_str(mk61emu_reg_stack_t reg)
{
    if (get_power_state() == engine_power_state_t::engine_off)
        return "";
    return this->m_reg_stack[static_cast<int>(reg)];
}

const char* mk61_emu::get_reg_mem_str(mk61emu_reg_mem_t reg)
{
    if (get_power_state() == engine_power_state_t::engine_off)
        return "";
    return m_reg_mem[static_cast<int>(reg)];
}

angle_unit_t mk61_emu::get_angle_unit()
{
    return m_angle_unit;
}

void mk61_emu::set_angle_unit(const angle_unit_t value)
{
    m_angle_unit = value;
}


const char* mk61_emu::get_angle_unit_str()
{
    if (get_power_state() == engine_power_state_t::engine_off)
        return "";
    switch (this->m_angle_unit)
    {
    case angle_unit_t::radian:
        return "RAD";
    case angle_unit_t::grade:
        return "GRD";
    case angle_unit_t::degree:
        return "DEG";
    }
    return "?";
}

const char* mk61_emu::get_indicator_str()
{
    memset(m_indicator_str, 0, 15);
    memset(m_indicator_str, ' ', 12);
    if (get_power_state() == engine_power_state_t::engine_off)
        return m_indicator_str;
    int i = 0;
    for (i = 0; i < 9; i++)
        m_indicator_str[i] = display_symbols[this->m_IK1302->R[(8 - i) * 3]];
    for (i = 0; i < 3; i++)
        m_indicator_str[i + 10] = display_symbols[this->m_IK1302->R[(11 - i) * 3]];
    int comma_pos = 9 - this->m_IK1302->comma + 1;
    for (i = 13; i >= comma_pos; i--)
        m_indicator_str[i] = this->m_indicator_str[i - 1];
    m_indicator_str[comma_pos] = ',';
    return m_indicator_str;
}

const char* mk61_emu::get_prog_counter_str()
{
    if (get_power_state() == engine_power_state_t::engine_off)
        return "";
    m_prog_counter_str[0] = m_prog_counter[0];
    m_prog_counter_str[1] = m_prog_counter[1];
    m_prog_counter_str[2] = 0;
    return m_prog_counter_str;
}

void mk61_emu::set_state(std::istream& data)
{
    set_power_state(engine_power_state_t::engine_off);
    set_power_state(engine_power_state_t::engine_on);
    m_IR2_1->read_state(data);
    m_IR2_2->read_state(data);
    m_IK1302->read_state(data);
    m_IK1303->read_state(data);
    data >> m_angle_unit;
    if (m_IK1306 != NULL)
        m_IK1306->read_state(data);
}

void mk61_emu::get_state(std::ostream& data)
{
    if (get_power_state() == engine_power_state_t::engine_off)
        return;
    m_IR2_1->write_state(data);
    m_IR2_2->write_state(data);
    m_IK1302->qrite_state(data);
    m_IK1303->qrite_state(data);
    data << m_angle_unit;
    if (this->m_IK1306 != NULL)
        m_IK1306->qrite_state(data);
}
